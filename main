#!/usr/bin/env python

__author__ = "Felix Simkovic"
__date__ = "16 Apr 2018"
__version__ = "0.1"

import av
import logging
import numpy as np
import matplotlib.collections as mcoll
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import sys

from skimage import color
from skimage.io import imread
from skimage.transform import hough_circle, hough_circle_peaks
from skimage.feature import canny
from skimage.draw import circle_perimeter
from skimage.util import img_as_ubyte

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()


def video_to_images(video_path):
    logger.info("Converting video to individual frames")
    container = av.open(video_path)
    for frame in container.decode(video=0):
        yield np.asarray(frame.to_image())
                

def determine_bubble_sizes_in_img(img_frame, debug=False):
    box = [650, 450, 50, 150]  # x, y, width, height

    if debug:
        fig, ax = plt.subplots()
        ax.imshow(img_frame)
        rect = mpatches.Rectangle((box[0], box[1]), box[2], box[3])
        ax.add_collection(mcoll.PatchCollection([rect], facecolor="none", edgecolor="#ff0000"))
        plt.show()

    image = img_as_ubyte(color.rgb2gray(img_frame)[box[1]:box[1]+box[3], box[0]:box[0]+box[2]])
    edges = canny(image, sigma=3, low_threshold=20, high_threshold=50)
    
    hough_radii = np.arange(8, 16, 1)
    hough_res = hough_circle(edges, hough_radii)

    _, cx, cy, radii = hough_circle_peaks(hough_res, hough_radii, total_num_peaks=1)
    
    if debug:
        fig, axes = plt.subplots(nrows=2, sharex=True, sharey=True)
        axes[0].imshow(edges, cmap=plt.cm.gray)
        image = color.gray2rgb(image)
        for center_y, center_x, radius in zip(cy, cx, radii):
            circy, circx = circle_perimeter(center_y, center_x, radius)
            image[circy, circx] = (220, 20, 20)
        axes[1].imshow(image, cmap=plt.cm.gray)
        plt.show()

    return radii 


if __name__ == "__main__":
    import argparse

    p = argparse.ArgumentParser()
    p.add_argument("--debug", default=False, action="store_true")
    p.add_argument("video", help="Path to a video file")
    args = p.parse_args()
    
    radii_per_frame = []
    for index, frame in enumerate(video_to_images(args.video)):
        if index % 2 == 0:
            logger.info("Processing video frame %d", index)
            radii_per_frame.append(
                determine_bubble_sizes_in_img(frame, debug=args.debug)
            )
    radii = np.asarray(radii_per_frame).flatten()

    fig, ax = plt.subplots()
    ax.hist(radii)
    fig.savefig(args.video + ".png", dpi=600)
