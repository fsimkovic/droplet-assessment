#!/usr/bin/env python

__author__ = "Felix Simkovic"
__date__ = "16 Apr 2018"
__version__ = "0.1"

import logging
import numpy as np
import sys

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

from src.video import VideoInSk
from src.misc import determine_droplet_sizes_in_frame, hist, csv

CORRECTION = {
    1: np.mean([0.486, 0.442, 0.446, 0.450, 0.454]),
    2: np.mean([0.454, 0.446, 0.482, 0.486, 0.442]),
    3: np.mean([0.490, 0.486, 0.454, 0.450]),
    4: np.mean([0.498, 0.502, 0.414, 0.438, 0.450, 0.478, 0.408, 0.442, 0.450, 0.482, 0.446, 0.442]),
    5: np.mean([0.460, 0.452, 0.448]),
}

if __name__ == "__main__":
    import argparse

    p = argparse.ArgumentParser()
    p.add_argument("--debug", default=False, action="store_true")
    p.add_argument("--hist", default=False, action="store_true")
    p.add_argument("--csv", default=False, action="store_true")
    p.add_argument("videos", nargs="+", help="Path to a video file")
    args = p.parse_args()

    radii_per_video_per_frame = []
    for vindex, video in enumerate(args.videos):
        logger.info("Working on video %d", vindex + 1)
        radii_per_video_per_frame.append([])
        for findex, frame in enumerate(VideoInSk(video).frames):
            logger.debug("Processing video frame %d", findex)
            radii, frame_ = determine_droplet_sizes_in_frame(frame, debug=args.debug)
            radii = np.asarray(radii) / CORRECTION[vindex + 1]
            radii_per_video_per_frame[-1].extend(radii)
        logger.info("Droplets counted in last video: %d", len(radii_per_video_per_frame[-1]))

    if args.hist:
        hist(radii_per_video_per_frame)
    if args.csv:
        csv(radii_per_video_per_frame)
